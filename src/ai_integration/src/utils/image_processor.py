"""
Utility module for processing images generated by the AI image generation service.
This includes resizing, format conversion, and ensuring images meet app specifications.
"""

# External dependencies
# PIL (Pillow) library for image processing, version 8.2.0
from PIL import Image  # Version 8.2.0

# Internal dependencies
from .logger import setup_logger

# Set up logging for monitoring image processing activities
# LOG_LEVEL should be defined in the configurations
LOG_LEVEL = 'INFO'  # Default log level
logger = setup_logger(LOG_LEVEL)

def process_image(image_path):
    """
    Processes an image to ensure it meets the app's specifications,
    including resizing and format conversion.

    Parameters:
        image_path (str): Path to the input image.

    Returns:
        str: Path to the processed image.

    This function addresses the requirement:
    - Ensure image formats and resolutions are optimized for mobile devices.
      (Technical Requirement TR-2.4, located at "TECHNICAL REQUIREMENTS/Feature 2: AI-Generated Images")

    Steps:
    1. Set up logging for the image processing task.
    2. Open the image from the specified path using PIL.
    3. Resize the image to the required dimensions for the app.
    4. Convert the image to the appropriate format (e.g., JPEG).
    5. Save the processed image to a new file path.
    6. Return the path to the processed image.
    """
    try:
        logger.info(f"Starting image processing for {image_path}")

        # Open the image from the specified path using PIL
        with Image.open(image_path) as img:
            logger.debug(f"Original image size: {img.size}")

            # Resize the image to the required dimensions for the app
            # Required dimensions should be defined as per app specifications
            # For this example, we use default mobile-friendly dimensions
            required_width = 800  # Placeholder value
            required_height = 600  # Placeholder value
            img = img.resize((required_width, required_height), Image.ANTIALIAS)
            logger.debug(f"Image resized to: {required_width}x{required_height}")

            # Convert the image to the appropriate format (e.g., JPEG)
            # Required format should be defined as per app specifications
            required_format = 'JPEG'  # Placeholder format

            # If the image is not in RGB mode and the target format is JPEG, convert it
            if img.mode != 'RGB' and required_format == 'JPEG':
                img = img.convert('RGB')
                logger.debug(f"Image converted to RGB mode for {required_format} format")

            # Prepare the output file path
            # Save the processed image with a '_processed' suffix
            processed_image_path = f"{image_path.rsplit('.', 1)[0]}_processed.{required_format.lower()}"

            # Save the processed image to a new file path
            img.save(processed_image_path, required_format)
            logger.info(f"Processed image saved to {processed_image_path}")

        # Return the path to the processed image
        return processed_image_path

    except Exception as e:
        logger.error(f"Error processing image {image_path}: {str(e)}")
        raise
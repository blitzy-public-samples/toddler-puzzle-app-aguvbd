/**
 * Prettier configuration file for the web application.
 * This configuration ensures consistent code formatting across JavaScript, TypeScript, and other supported file types,
 * adhering to the code quality standards defined in the technical specifications.
 *
 * Requirements Addressed:
 * - Code Formatting and Consistency (Technical Specification/Development Practices/Code Quality):
 *   Ensure that the code adheres to a consistent style guide, facilitating readability and maintainability.
 *
 * Dependencies:
 * - Prettier v2.0.0 - Provides automated code formatting to maintain consistent code style across the project.
 */

module.exports = {
  /**
   * Specify the line length that the printer will wrap on.
   * This helps maintain code readability on various screen sizes.
   * { "printWidth": 80 }
   */
  printWidth: 80,

  /**
   * Specify the number of spaces per indentation level.
   * Consistent indentation improves code readability.
   * { "tabWidth": 2 }
   */
  tabWidth: 2,

  /**
   * Indent lines with tabs instead of spaces.
   * Using spaces ensures consistent rendering across different editors.
   * { "useTabs": false }
   */
  useTabs: false,

  /**
   * Print semicolons at the ends of statements.
   * This reduces potential errors in ASI (Automatic Semicolon Insertion).
   * { "semi": true }
   */
  semi: true,

  /**
   * Use single quotes instead of double quotes where possible.
   * This aligns with common JavaScript style guides.
   * { "singleQuote": true }
   */
  singleQuote: true,

  /**
   * Print trailing commas wherever possible when multi-line.
   * This helps with version control diffs and improves code readability.
   * Supported values: "none", "es5", "all"
   * { "trailingComma": "es5" }
   */
  trailingComma: 'es5',

  /**
   * Print spaces between brackets in object literals.
   * Improves readability of object structures.
   * { "bracketSpacing": true }
   */
  bracketSpacing: true,

  /**
   * Put the '>' of a multi-line JSX element at the end of the last line instead of being alone on the next line.
   * This improves the readability of JSX code.
   * { "jsxBracketSameLine": false }
   */
  jsxBracketSameLine: false,

  /**
   * Include parentheses around a sole arrow function parameter.
   * Omitting parentheses for single parameters improves code brevity.
   * Supported values: "avoid", "always"
   * { "arrowParens": "avoid" }
   */
  arrowParens: 'avoid',
};